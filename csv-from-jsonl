#!/usr/bin/env php
<?php
// Recursive flatten an N-level nested structure
function flatten($value, $prefix=null) {
	if(is_array($value)) {
		$flat = array();
		foreach($value as $attr=>$val) {
			$flat = array_merge($flat, flatten($val, (isset($prefix) ? $prefix.'.'.$attr : $attr)));
		}
		return $flat;
	} else {
		return (isset($prefix) ? array($prefix=>$value) : $value);
	}
}

// Recursively merge two arrays returning an array with all possible keys,
// setting all leaf values to a default
function collate_all_keys($a, $b, $leaf_value=null) {
	foreach($b as $k=>$v) {
		if(!is_null($v)) {
			$a[$k] = (is_array($v)
				? collate_all_keys(
					(isset($a[$k])
					? $a[$k]
					: array()),
					$v,
					$leaf_value
				)
				: $leaf_value);
		}
	}
	return $a;
}

$I = fopen($_SERVER['argv'][1], 'r');

$keys = array();
// 1st pass to read all keys, so we collect them all
while( ($json = fgets($I))!==false ) {
	$data = json_decode($json, true);
	$keys = collate_all_keys($keys, $data);
}
$headings = flatten($keys);
fputcsv(STDOUT, array_keys($headings));
// 2nd pass to collate data against headings, allowing blanks as applicable
rewind($I);
while( ($json = fgets($I))!==false ) {
	$data = flatten(json_decode($json, true));
	fputcsv(STDOUT, array_replace($headings, $data));
}
fclose($I);
