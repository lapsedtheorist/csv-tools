#!/usr/bin/env python3
#
#   Take one or more JSON files that have one JSON structure per line (i.e.
#   JSON Lines format), flatten each using JSON path notation, and write the
#   output as a corresponding CSV file with a simple name suffix
#
#   Author: Ben Carpenter
#   Date: July 2021

import argparse
import csv
import json
import re
import sys

argparser = argparse.ArgumentParser(
        description="""Take one or more JSON files that have one JSON structure
        per line (i.e. JSON Lines format), flatten each using JSON path
        notation, and write the output as a corresponding CSV file with a
        simple name suffix. For input over STDIN, output will be on STDOUT."""
        )
argparser.add_argument("file.json", nargs="+", help="JSON Lines file, or '-' for STDIN")
args = vars(argparser.parse_args())

def flatten(value, prefix=None):
    if isinstance(value, dict):
        flat = {}
        prefixstr = ""
        if prefix is not None:
            prefixstr = prefix + "."
        for k, v in value.items():
            flat.update(
                    flatten(
                        v,
                        prefixstr + k
                        )
                    )
        return flat
    elif isinstance(value, list):
        flat = {}
        prefixstr = ""
        if prefix is not None:
            prefixstr = prefix
        for k, v in enumerate(value):
            flat.update(
                    flatten(
                        v,
                        "{}[{}]".format(prefixstr, k)
                        )
                    )
        return flat
    else:
        if prefix is not None:
            return { prefix: value }
        else:
            return value

def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    return [ atoi(c) for c in re.split(r'(\d+)', text) ]


for filepath in args["file.json"]:
    all_keys = set()
    data = []

    if filepath == "-":
        for line in sys.stdin:
            d = flatten(json.loads(line))
            all_keys = all_keys.union(d.keys())
            data.append(d)

        headings = list(all_keys)
        headings.sort(key=natural_keys)

        writer = csv.DictWriter(sys.stdout, fieldnames=headings)
        writer.writeheader()
        writer.writerows(data)
    else:
        with open(filepath, 'r') as input_file:
            for line in input_file:
                d = flatten(json.loads(line))
                all_keys = all_keys.union(d.keys())
                data.append(d)

        headings = list(all_keys)
        headings.sort(key=natural_keys)

        with open(filepath + ".csv", "w", newline="") as output_file:
            writer = csv.DictWriter(output_file, fieldnames=headings)
            writer.writeheader()
            writer.writerows(data)
